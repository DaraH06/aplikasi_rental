package View;

import com.mysql.cj.protocol.Resultset;
import database.database_two;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author mahar
 */
public class MenuKonsol extends javax.swing.JPanel {

    /**
     * Creates new form MenuDashboard
     */
    private int HalamanSaatIni = 1;
    private int DataperHalaman = 14;
    private int totalpages;

    private final Connection con;// Koneksi database

    private String IdKategori;

    // Konstruktor kelas MenuKonsol
    public MenuKonsol() {
        con = database_two.con(); // Membuat koneksi ke database
        initComponents(); // Inisialisasi komponen GUI
        loadData(); // Memuat data Konsol ke dalam JTable
        setTabelModel(); // Mengatur model tabel (misalnya, kolom-kolomnya)
        resetForm(); // Mereset form input menjadi kosong
        paginationKonsol(); // Mengatur paginasi untuk tampilan data
        actionButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbJenisKelamin = new javax.swing.ButtonGroup();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_data = new Palette.JTable_Custom();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btn_hapus = new Palette.Custom_ButtonRounded();
        btn_tambah = new Palette.Custom_ButtonRounded();
        txt_search = new Palette.JTextfieldRounded();
        btn_first = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        lb_halaman = new javax.swing.JLabel();
        btn_cancel = new Palette.Custom_ButtonRounded();
        panelAdd = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_simpan = new Palette.Custom_ButtonRounded();
        btn_batal_add = new Palette.Custom_ButtonRounded();
        txt_id = new Palette.JTextfieldRounded();
        jLabel8 = new javax.swing.JLabel();
        txt_nama = new Palette.JTextfieldRounded();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        rb_tersedia = new javax.swing.JRadioButton();
        rb_digunakan = new javax.swing.JRadioButton();
        txt_harga_perjam = new Palette.JTextfieldRounded();
        jLabel13 = new javax.swing.JLabel();
        sp_stock = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        cbx_kategori = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        panelMain.setBackground(new java.awt.Color(255, 255, 255));
        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));

        tbl_data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        tbl_data.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tbl_data.setSelectionForeground(new java.awt.Color(204, 255, 51));
        jScrollPane1.setViewportView(tbl_data);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Icon2.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Home.png"))); // NOI18N
        jLabel2.setText("> Konsol");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Data Konsol");

        btn_hapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Delete.png"))); // NOI18N
        btn_hapus.setText("Hapus");
        btn_hapus.setFillClick(new java.awt.Color(153, 0, 51));
        btn_hapus.setFillOriginal(new java.awt.Color(255, 0, 51));
        btn_hapus.setFillOver(new java.awt.Color(204, 0, 51));

        btn_tambah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Add.png"))); // NOI18N
        btn_tambah.setText("Tambah");
        btn_tambah.setFillClick(new java.awt.Color(0, 51, 102));
        btn_tambah.setFillOver(new java.awt.Color(41, 128, 185));

        txt_search.setForeground(new java.awt.Color(102, 102, 102));
        txt_search.setText("Search");
        txt_search.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N

        btn_first.setText("First Page");

        btn_before.setText("<");

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "16", "32", "64" }));

        btn_next.setText(">");

        btn_last.setText("Last Page");

        lb_halaman.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lb_halaman.setForeground(new java.awt.Color(153, 153, 153));
        lb_halaman.setText("Halaman of Total Halaman");

        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Cancel.png"))); // NOI18N
        btn_cancel.setText("Batal");
        btn_cancel.setFillClick(new java.awt.Color(153, 51, 0));
        btn_cancel.setFillOriginal(new java.awt.Color(255, 102, 0));
        btn_cancel.setFillOver(new java.awt.Color(204, 102, 0));

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                                .addComponent(btn_tambah, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(19, 19, 19))
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(345, 345, 345)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addComponent(btn_first)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_before)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_last))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lb_halaman)
                        .addGap(27, 27, 27)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tambah, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lb_halaman)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_first, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_last, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelMain.add(panelView, "card2");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Icon2.png"))); // NOI18N

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Home.png"))); // NOI18N
        jLabel6.setText("> Konsol");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Tambah Data Konsol");

        btn_simpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Save.png"))); // NOI18N
        btn_simpan.setText("Simpan");
        btn_simpan.setFillClick(new java.awt.Color(0, 51, 102));
        btn_simpan.setFillOver(new java.awt.Color(41, 128, 185));

        btn_batal_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Cancel.png"))); // NOI18N
        btn_batal_add.setText("Batal");
        btn_batal_add.setFillClick(new java.awt.Color(153, 51, 0));
        btn_batal_add.setFillOriginal(new java.awt.Color(255, 102, 0));
        btn_batal_add.setFillOver(new java.awt.Color(204, 102, 0));

        txt_id.setForeground(new java.awt.Color(102, 102, 102));
        txt_id.setText("ID Konsol");
        txt_id.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("ID Konsol");

        txt_nama.setForeground(new java.awt.Color(102, 102, 102));
        txt_nama.setText("Nama Konsol");
        txt_nama.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Nama Konsol");

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("Status");

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Kategori");

        rbJenisKelamin.add(rb_tersedia);
        rb_tersedia.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rb_tersedia.setForeground(new java.awt.Color(51, 51, 51));
        rb_tersedia.setText("Tersedia");

        rbJenisKelamin.add(rb_digunakan);
        rb_digunakan.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rb_digunakan.setForeground(new java.awt.Color(51, 51, 51));
        rb_digunakan.setText("Dugunakan");

        txt_harga_perjam.setForeground(new java.awt.Color(102, 102, 102));
        txt_harga_perjam.setText("Harga Perjam");
        txt_harga_perjam.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Harga Perjam");

        sp_stock.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        sp_stock.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel15.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Stock");

        cbx_kategori.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        cbx_kategori.setForeground(new java.awt.Color(102, 102, 102));

        jLabel16.setFont(new java.awt.Font("Poppins", 1, 10)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 204, 204));
        jLabel16.setText("Kategori");

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(txt_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_nama, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16))
                            .addComponent(cbx_kategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(txt_harga_perjam, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(sp_stock, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 642, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(20, 20, 20))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(rb_tersedia)
                                .addGap(18, 18, 18)
                                .addComponent(rb_digunakan))
                            .addComponent(jLabel11)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_batal_add, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_batal_add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_stock, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_harga_perjam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbx_kategori, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGap(27, 27, 27)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_tersedia)
                    .addComponent(rb_digunakan))
                .addGap(69, 69, 69))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Palette.Custom_ButtonRounded btn_batal_add;
    private javax.swing.JButton btn_before;
    private Palette.Custom_ButtonRounded btn_cancel;
    private javax.swing.JButton btn_first;
    private Palette.Custom_ButtonRounded btn_hapus;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private Palette.Custom_ButtonRounded btn_simpan;
    private Palette.Custom_ButtonRounded btn_tambah;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JComboBox<String> cbx_kategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.ButtonGroup rbJenisKelamin;
    private javax.swing.JRadioButton rb_digunakan;
    private javax.swing.JRadioButton rb_tersedia;
    private javax.swing.JSpinner sp_stock;
    private Palette.JTable_Custom tbl_data;
    private Palette.JTextfieldRounded txt_harga_perjam;
    private Palette.JTextfieldRounded txt_id;
    private Palette.JTextfieldRounded txt_nama;
    private Palette.JTextfieldRounded txt_search;
    // End of variables declaration//GEN-END:variables

    // paginationKonsol() - Mengatur fungsi pagination untuk Konsol
    private void paginationKonsol() {
        // Mengatur tombol halaman pertama
        btn_first.addActionListener(e -> {
            HalamanSaatIni = 1;// Set ke halaman pertama
            loadData(); // Memuat data pada halaman pertama
        });

        // Mengatur tombol halaman sebelumnya
        btn_before.addActionListener(e -> {
            if (HalamanSaatIni > 1) {// Memastikan halaman saat ini lebih dari 1
                HalamanSaatIni--; // Turun ke halaman sebelumnya
                loadData();// Memuat data pada halaman saat ini
            }
        });

        // Mengatur combo box untuk jumlah data per halaman
        cbx_data.addActionListener(e -> {
            DataperHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());// Mengambil jumlah data per halaman dari combo box
            HalamanSaatIni = 1;// Set ke halaman pertama setiap kali data per halaman diubah
            loadData(); //Memuat data
        });

        // Mengatur tombol halaman berikutnya
        btn_next.addActionListener(e -> {
            if (HalamanSaatIni < totalpages) {// Memastikan belum di halaman terakhir
                HalamanSaatIni++;// Naik ke halaman berikutnya
                loadData();//Memuat data pada halaman baru
            }
        });

        // Mengatur tombol halaman terakhir
        btn_last.addActionListener(e -> {
            HalamanSaatIni = totalpages;// Set ke halaman terakhir
            loadData();// Memuat data pada halaman terakhir
        });

    }

    //button tambah, simpan, hapus, cancel, search, TableMouseclick
    private void actionButton() {
        // Mengatur tombol halaman pertama
        btn_tambah.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                panelMain.removeAll();
                panelMain.add(panelAdd);// Beralih ke panel tambah/edit
                panelMain.repaint();
                panelMain.revalidate();

                try {
                    txt_id.setText(setIDKonsol());
                    if (btn_tambah.getText().equals("UBAH")) {
                        dataTabel();
                        btn_simpan.setText("PERBARUI");
                    } else {
                        btn_simpan.setText("SIMPAN");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

        btn_simpan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btn_simpan.getText().equals("SIMPAN")) {
                    insertData(); // Menyimpan data baru ke database
                } else if (btn_simpan.getText().equals("PERBARUI")) {
                    updateData(); // Memperbarui data Konsol yang sudah ada
                }
            }
        });

        btn_hapus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                hapusData();// Memanggil fungsi hapusData() untuk menghapus data yang dipilih
            }
        });

        btn_cancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showPanel(); // Kembali ke panel utama
                loadData(); // Refresh data di JTable
            }
        });

        btn_batal_add.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showPanel();// Kembali ke panel utama
                loadData();// Refresh data di JTable
            }
        });

        txt_search.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                searchData(); // Memanggil fungsi searchData() untuk mencari data berdasarkan kata kunci
            }
        });

        tbl_data.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                btn_tambah.setText("UBAH"); // Ubah tombol tambah menjadi "UBAH"
                btn_simpan.setText("PERBARUI"); // Ubah tombol simpan menjadi "PERBARUI"
                btn_cancel.setVisible(true); // Tampilkan tombol batal
                btn_hapus.setVisible(true); // Tampilkan tombol hapus
            }
        });
    }

    // calculateTotalPage() - Menghitung total halaman berdasarkan jumlah data dan data per halaman
    private void calculateTotalPage() {
        int totalData = getTotalData();// Mendapatkan total data Konsol
        totalpages = (int) Math.ceil((double) totalData / DataperHalaman);// Menghitung total halaman
    }

    // getTotalData() - Mendapatkan total data Konsol dari database
    private int getTotalData() {
        int totalData = 0;
        try {
            String sql = "SELECT COUNT(*) AS total FROM tbl_konsol";// Query menghitung total data Konsol
            try (PreparedStatement st = con.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery(); // Eksekusi query
                if (rs.next()) {
                    totalData = rs.getInt("total");// Mendapatkan jumlah total dari kolom "total"
                }
            }
        } catch (Exception e) {
            Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);
        }
        return totalData;// Mengembalikan jumlah data
    }

    // loadData() - Memuat data Konsol ke dalam JTable berdasarkan halaman saat ini
    private void loadData() {
        getKategori();
        calculateTotalPage();// Menghitung total halaman
        int totalData = getTotalData();// Mendapatkan total data Konsol
        lb_halaman.setText(String.valueOf("Halaman " + HalamanSaatIni + " Dari total data " + totalData)); // Menampilkan halaman saat ini

        int startIndex = (HalamanSaatIni - 1) * DataperHalaman;// Menentukan indeks awal data berdasarkan halaman saat ini
        getData(startIndex, DataperHalaman, (DefaultTableModel) tbl_data.getModel());// Mendapatkan data untuk ditampilkan di tabel
        btn_hapus.setVisible(false); // Menyembunyikan tombol hapus
        btn_cancel.setVisible(false); // Menyembunyikan tombol batal
    }

    // showPanel() - Mengatur tampilan panel utama
    private void showPanel() {
        panelMain.removeAll();// Menghapus semua komponen di panel utama
        panelMain.add(new MenuKonsol());// Menambahkan panel MenuKonsol ke panel utama
        panelMain.repaint();// Menggambar ulang panel utama
        panelMain.revalidate();// Memastikan perubahan diterapkan
    }

    // resetForm() - Mengosongkan input form Konsol
    private void resetForm() {
        txt_id.setText(""); // Mengosongkan teks ID
        txt_nama.setText(""); // Mengosongkan teks Nama Konsol
        rbJenisKelamin.clearSelection(); // Mengosongkan pilihan jenis kelamin pada radio button
        txt_harga_perjam.setText(""); // Mengosongkan harga per jam
//        txt_kategori.setText(""); // Mengosongkan kategori
        sp_stock.setValue(0); // Mengatur nilai stok kembali ke default, misalnya 0 jika menggunakan JSpinner
    }

    // setTabelModel() - Mengatur model tabel dengan kolom-kolom yang sesuai
    private void setTabelModel() {
        String[] columnNames = {
            "ID Konsol",
            "Nama",
            "Kategori",
            "Status",
            "Stock",
            "Harga Perjam",
        };
        DefaultTableModel model = new DefaultTableModel(columnNames, 0); // Membuat model tabel dengan kolom yang ditentukan
        tbl_data.setModel(model); // Mengatur model tabel untuk JTable
        loadData(); // Memuat data ke dalam tabel
    }

    // getData() - Mendapatkan data Konsol dari database dengan batasan jumlah data per halaman
    private void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0); // Mengosongkan data yang ada di tabel

        try {
            String sql = "SELECT tbl_konsol.ID_Konsol, tbl_konsol.Nama_Konsol, tbl_konsol.Status, tbl_konsol.Stock, tbl_konsol.Harga_Perjam, "
                    + "tbl_kategori.ID_Kategori, tbl_kategori.Nama_Kategori "
                    + "FROM tbl_konsol "
                    + "INNER JOIN tbl_kategori ON tbl_kategori.ID_Kategori = tbl_konsol.ID_Kategori "
                    + "ORDER BY tbl_konsol.ID_Konsol DESC LIMIT ?, ?";
            // Query dengan limit berdasarkan halaman
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setInt(1, startIndex); // Indeks awal
                st.setInt(2, entriesPage); // Jumlah data per halaman
                ResultSet rs = st.executeQuery(); // Eksekusi query

                while (rs.next()) {
                    String IdKonsol = rs.getString("ID_Konsol");
                    String NamaKonsol = rs.getString("Nama_Konsol");
                    String NamaKategori = rs.getString("Nama_Kategori");
                    String Status = rs.getString("Status");
                    String Stock = rs.getString("Stock");
                    String HargaPerjam = rs.getString("Harga_Perjam");

                    Object[] rowData = {IdKonsol, NamaKonsol, NamaKategori, Status, Stock, HargaPerjam}; // Data Konsol
                    model.addRow(rowData); // Menambahkan baris data ke dalam tabel
                }
            }
        } catch (Exception e) {
            Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);

        }
    }

    // setIDKonsol() - Mengatur ID Konsol secara otomatis
    private String setIDKonsol() throws SQLException {
        String urutan = null;
        Date now = new Date();
        SimpleDateFormat noFormat = new SimpleDateFormat("yyMM"); // Format tanggal sebagai bagian dari ID
        String no = noFormat.format(now);

        String sql = "SELECT RIGHT(ID_Konsol, 3) AS Nomor FROM tbl_konsol WHERE ID_Konsol LIKE '" + no + "%' ORDER BY ID_Konsol DESC LIMIT 1";

        try (PreparedStatement st = con.prepareStatement(sql)) {
            ResultSet rs = st.executeQuery(); // Eksekusi query

            if (rs.next()) {
                int nomor = Integer.parseInt(rs.getString("Nomor")) + 1; // Menambah nomor urut
                urutan = no + String.format("%03d", nomor); // Format ID baru (tanpa "KSL")
            } else {
                urutan = no + "001"; // ID awal jika tidak ada data (tanpa "KSL")
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);
        }
        return urutan;
    }

    private void getKategori() {
        try {
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement("Pilih Kategori");

            String sql = "SELECT ID_Kategori, Nama_Kategori FROM tbl_kategori";
            PreparedStatement st = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String NamaKategori = rs.getString("Nama_Kategori");
                model.addElement(NamaKategori);
            }

            cbx_kategori.setModel(model);
            cbx_kategori.addActionListener(e -> {
                int selectIndex = cbx_kategori.getSelectedIndex();

                if (selectIndex > 0) {
                    try {
                        rs.absolute(selectIndex);
                        IdKategori = rs.getString("ID_Kategori");
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // insertData() - Menambahkan data Konsol ke database
    private void insertData() {
        String IdKonsol = txt_id.getText();
        String NamaKonsol = txt_nama.getText();
        String Status = rb_tersedia.isSelected() ? rb_tersedia.getText() : rb_digunakan.isSelected() ? rb_digunakan.getText() : "";

        // Mengambil nilai stock dari JSpinner dan mengonversinya ke tipe yang sesuai (misalnya Integer)
        Integer Stock = (Integer) sp_stock.getValue();  // Mengambil nilai stock dari JSpinner

        String HargaPerjam = txt_harga_perjam.getText();

        // Validasi input data
        if (IdKonsol.isEmpty() || NamaKonsol.isEmpty() || Status.isEmpty() || Stock == null || HargaPerjam.isEmpty() || cbx_kategori.getSelectedItem().toString().equals("Pilih Kategori")) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus Diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Insert data ke database
        try {
            String sql = "INSERT INTO tbl_konsol (ID_Konsol, Nama_Konsol, Status, Stock, Harga_Perjam, ID_Kategori) VALUES (?,?,?,?,?,?)";
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setString(1, IdKonsol);
                st.setString(2, NamaKonsol);
                st.setString(3, Status);
                st.setInt(4, Stock); // Menyimpan nilai stock sebagai integer
                st.setString(5, HargaPerjam);
                st.setString(6, IdKategori);

                int rowInserted = st.executeUpdate(); // Menjalankan perintah insert
                if (rowInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Ditambahkan");
                    resetForm(); // Kosongkan text field setelah data berhasil ditambahkan
                    loadData();  // Memuat data ke tampilan JTable atau komponen lainnya
                    showPanel();
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    // dataTabel() - Menampilkan data Konsol dari JTable ke dalam form untuk diperbarui
    private void dataTabel() {
        panelView.setVisible(false); // Menyembunyikan panel view
        panelAdd.setVisible(true); // Menampilkan panel tambah/edit

        int row = tbl_data.getSelectedRow(); // Mendapatkan baris yang dipilih pada tabel
        jLabel7.setText("PERBARUI DATA Konsol"); // Mengubah teks label menjadi "PERBARUI DATA Konsol"
        txt_id.setEnabled(false); // Menonaktifkan field ID Konsol agar tidak bisa diedit
        String id = tbl_data.getModel().getValueAt(row, 0).toString();

        // Mengisi field form dengan data dari baris yang dipilih
        txt_id.setText(tbl_data.getValueAt(row, 0).toString());
        txt_nama.setText(tbl_data.getValueAt(row, 1).toString());

        IdKategori = tbl_data.getModel().getValueAt(row, 2).toString();
        String Status = tbl_data.getValueAt(row, 3).toString();
        if (Status.equals("Tersedia")) {
            rb_tersedia.setSelected(true); // Memilih radio button Tersedia jika data di tabel sama
        } else if (Status.equals("Digunakan")) {
            rb_digunakan.setSelected(true); // Memilih radio button Digunakan jika data di tabel sama
        }

        // Mengisi nilai stock ke dalam JSpinner
        Integer Stock = Integer.parseInt(tbl_data.getValueAt(row, 4).toString()); // Mengambil nilai stock dari tabel dan mengonversinya ke Integer
        sp_stock.setValue(Stock); // Menetapkan nilai stock ke JSpinner

        // Mengisi harga per jam dan harga per hari
        txt_harga_perjam.setText(tbl_data.getValueAt(row, 5).toString());

        getKategoriID(IdKategori);
    }

    private void getKategoriID(String id) {
        try {
            String sql = "SELECT ID_Kategori, Nama_Kategori FROM tbl_kategori";
            PreparedStatement st = con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String IdKtg = rs.getString("ID_Kategori");
                String NamaKtg = rs.getString("Nama_Kategori");

                if (id.equals(IdKategori)) {
                    jLabel16.setText(IdKtg);
                    cbx_kategori.setSelectedItem(NamaKtg);
                }
            }

            cbx_kategori.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        String selectedKtg = (String) cbx_kategori.getSelectedItem().toString();
                        updateKategoriID(selectedKtg);
                    }
                }

            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateKategoriID(String selectedKtg) {
        try {
            String sql = "SELECT ID_Kategori, Nama_Kategori FROM tbl_kategori WHERE Nama_Kategori = ?";
            PreparedStatement st = con.prepareStatement(sql);
            st.setString(1, selectedKtg);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                String IdKtg = rs.getString("ID_Kategori");
                jLabel16.setText(IdKtg);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // updateData() - Memperbarui data Konsol di database
    private void updateData() {
        String IdKonsol = txt_id.getText();
        String NamaKonsol = txt_nama.getText();
        String Status = rb_tersedia.isSelected() ? rb_tersedia.getText() : rb_digunakan.isSelected() ? rb_digunakan.getText() : "";

        // Mengambil nilai stock dari JSpinner dan mengonversinya ke tipe yang sesuai (misalnya Integer)
        Integer Stock = (Integer) sp_stock.getValue();  // Mengambil nilai stock dari JSpinner

        String HargaPerjam = txt_harga_perjam.getText();

        // Validasi input data
        if (IdKonsol.isEmpty() || NamaKonsol.isEmpty() || Status.isEmpty() || Stock == null || HargaPerjam.isEmpty() || cbx_kategori.getSelectedItem().toString().equals("Pilih Kategori")) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus Dipilih dan Diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update data ke database
        try {
            // Memperbaiki query untuk memasukkan nilai Stock, Status, HargaPerjam, dan HargaPerhari
            String sql = "UPDATE tbl_konsol SET Nama_Konsol=?, Status=?, Stock=?, Harga_Perjam=?, ID_Kategori=? WHERE ID_Konsol=?";
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setString(1, NamaKonsol); // Set Nama Konsol
                st.setString(2, Status); // Set Status (Tersedia / Digunakan)
                st.setInt(3, Stock);  // Menyimpan nilai stock yang sudah diambil sebagai integer
                st.setString(4, HargaPerjam); // Set Harga per Jam
                st.setString(5, IdKategori);
                st.setString(6, IdKonsol);

                int rowUpdated = st.executeUpdate(); // Menjalankan perintah update
                if (rowUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    resetForm(); // Kosongkan form setelah data diperbarui
                    loadData();  // Refresh data di JTable
                    showPanel(); // Tampilkan panel utama
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    // hapusData() - Menghapus data Konsol dari database
    private void hapusData() {
        int row = tbl_data.getSelectedRow();// Mendapatkan baris yang dipilih
        String IdKonsol = tbl_data.getValueAt(row, 0).toString();// Mendapatkan ID Konsol dari baris yang dipilih

        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda Yakin Menghapus Data Ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String sql = "DELETE FROM tbl_konsol WHERE ID_Konsol=?";
                try (PreparedStatement st = con.prepareStatement(sql)) {
                    st.setString(1, IdKonsol);

                    int rowDeleted = st.executeUpdate();// Eksekusi penghapusan
                    if (rowDeleted > 0) {
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                        loadData();// Refresh data di JTable
                    }
                }
            } catch (SQLException e) {
                Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }

    // searchData() - Mencari data Konsol berdasarkan nama atau alamat
    private void searchData() {
        String kataKunci = txt_search.getText(); // Mengambil kata kunci dari text field pencarian

        DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
        model.setRowCount(0); // Mengosongkan data di tabel sebelum memuat hasil pencarian

        try {
            // Modifikasi query untuk mencakup pencarian berdasarkan Nama_Konsol dan Stock
            String sql = "SELECT tbl_konsol.ID_Konsol, tbl_konsol.Nama_Konsol, tbl_konsol.Status, tbl_konsol.Stock, tbl_konsol.Harga_Perjam, "
                    + "tbl_kategori.ID_Kategori, tbl_kategori.Nama_Kategori "
                    + "FROM tbl_konsol "
                    + "INNER JOIN tbl_kategori ON tbl_kategori.ID_Kategori = tbl_konsol.ID_Kategori "
                    + "WHERE tbl_konsol.Nama_Konsol Like ? OR tbl_konsol.Status Like ?";
            try (PreparedStatement st = con.prepareStatement(sql)) {
                // Menambahkan parameter pencarian pada kolom Nama_Konsol dan Stock
                st.setString(1, "%" + kataKunci + "%");
                st.setString(2, "%" + kataKunci + "%"); // Menambahkan pencarian berdasarkan Stock

                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String IdKonsol = rs.getString("ID_Konsol");
                    String NamaKonsol = rs.getString("Nama_Konsol");
                    String NamaKategori = rs.getString("Nama_Kategori");
                    String Status = rs.getString("Status");
                    String Stock = rs.getString("Stock");
                    String HargaPerjam = rs.getString("Harga_Perjam");

                    // Menambahkan hasil pencarian ke dalam JTable
                    Object[] rowData = {IdKonsol, NamaKonsol, NamaKategori, Status, Stock, HargaPerjam};
                    model.addRow(rowData);
                }
            }
        } catch (Exception e) {
            Logger.getLogger(MenuKonsol.class.getName()).log(Level.SEVERE, null, e);
        }
    }

}
