package View;

import Main.MenuUtama;
import com.mysql.cj.protocol.Resultset;
import database.database_two;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author mahar
 */
public class MenuLaporan extends javax.swing.JPanel {

    /**
     * Creates new form MenuDashboard
     */
    private int HalamanSaatIni = 1;
    private int DataperHalaman = 14;
    private int totalpages;

    private final Connection con;// Koneksi database

    // Konstruktor kelas MenuKategori
    public MenuLaporan() {
        con = database_two.con(); // Membuat koneksi ke database
        initComponents(); // Inisialisasi komponen GUI
        loadData(); // Memuat data Kategori ke dalam JTable
        setTabelModel(); // Mengatur model tabel (misalnya, kolom-kolomnya)
        pagination(); // Mengatur paginasi untuk tampilan data
        updateTotalPendapatan(con);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbJenisKelamin = new javax.swing.ButtonGroup();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_data = new Palette.JTable_Custom();
        jLabel1 = new javax.swing.JLabel();
        back_dashboard = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_search = new Palette.JTextfieldRounded();
        btn_first = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        lb_halaman = new javax.swing.JLabel();
        border_pendapatan = new javax.swing.JPanel();
        Pendapatan = new javax.swing.JLabel();
        pendapatanTotal = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        panelMain.setBackground(new java.awt.Color(255, 255, 255));
        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));

        tbl_data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        tbl_data.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tbl_data.setSelectionForeground(new java.awt.Color(204, 255, 51));
        tbl_data.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_dataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_data);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Diversity.png"))); // NOI18N

        back_dashboard.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        back_dashboard.setForeground(new java.awt.Color(102, 102, 102));
        back_dashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Home.png"))); // NOI18N
        back_dashboard.setText("> kembali");
        back_dashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                back_dashboardMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Laporan Keuangan");

        txt_search.setColumns(1);
        txt_search.setForeground(new java.awt.Color(102, 102, 102));
        txt_search.setText("Search");
        txt_search.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchKeyTyped(evt);
            }
        });

        btn_first.setText("First Page");

        btn_before.setText("<");

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "16", "32", "64" }));

        btn_next.setText(">");

        btn_last.setText("Last Page");

        lb_halaman.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lb_halaman.setForeground(new java.awt.Color(153, 153, 153));
        lb_halaman.setText("Halaman of Total Halaman");

        border_pendapatan.setBackground(new java.awt.Color(204, 255, 255));
        border_pendapatan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        border_pendapatan.setPreferredSize(new java.awt.Dimension(21, 36));

        Pendapatan.setText("TOTAL PENDAPATAN : ");

        pendapatanTotal.setText("jLabel2");

        javax.swing.GroupLayout border_pendapatanLayout = new javax.swing.GroupLayout(border_pendapatan);
        border_pendapatan.setLayout(border_pendapatanLayout);
        border_pendapatanLayout.setHorizontalGroup(
            border_pendapatanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(border_pendapatanLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(Pendapatan)
                .addGap(18, 18, 18)
                .addComponent(pendapatanTotal)
                .addContainerGap(137, Short.MAX_VALUE))
        );
        border_pendapatanLayout.setVerticalGroup(
            border_pendapatanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(border_pendapatanLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(border_pendapatanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pendapatan)
                    .addComponent(pendapatanTotal))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(345, 345, 345)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addComponent(btn_first)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_before)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_last))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lb_halaman)
                        .addGap(27, 27, 27)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                        .addComponent(border_pendapatan, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(back_dashboard)))))
                .addGap(19, 19, 19))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back_dashboard)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 23, Short.MAX_VALUE)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lb_halaman)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_first, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_last, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(border_pendapatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelMain.add(panelView, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_dataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_dataMouseClicked
        
    }//GEN-LAST:event_tbl_dataMouseClicked

    private void txt_searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyTyped
        searchData(); // Memanggil fungsi searchData() untuk mencari data berdasarkan kata kunci
    }//GEN-LAST:event_txt_searchKeyTyped

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchActionPerformed

    private void back_dashboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_dashboardMouseClicked
        back_dashboard.removeAll();
        back_dashboard.add(new MenuUtama());
        back_dashboard.repaint();
        back_dashboard.revalidate();
    }//GEN-LAST:event_back_dashboardMouseClicked
//untuk sum total bayar
    public void updateTotalPendapatan(Connection con) {
    String sql = "SELECT SUM(total) AS Total_Pendapatan FROM tbl_transaksi";

    try (PreparedStatement stmt = con.prepareStatement(sql); 
         ResultSet rs = stmt.executeQuery()) {

        if (rs.next()) {
            double totalPendapatan = rs.getDouble("Total_Pendapatan"); // Ambil hasil query
            pendapatanTotal.setText("Rp " + totalPendapatan);          // Update JLabel dengan nilai pendapatan
        } else {
            pendapatanTotal.setText("Rp 0"); // Jika tidak ada data, tampilkan Rp 0
        }

    } catch (SQLException e) {
        e.printStackTrace();
        pendapatanTotal.setText("Error!"); // Jika terjadi error, tampilkan pesan error
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Pendapatan;
    private javax.swing.JLabel back_dashboard;
    private javax.swing.JPanel border_pendapatan;
    private javax.swing.JButton btn_before;
    private javax.swing.JButton btn_first;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.JLabel pendapatanTotal;
    private javax.swing.ButtonGroup rbJenisKelamin;
    private Palette.JTable_Custom tbl_data;
    private Palette.JTextfieldRounded txt_search;
    // End of variables declaration//GEN-END:variables

    
    // pagination() - Mengatur fungsi pagination untuk Kategori
    private void pagination() {
        // Mengatur tombol halaman pertama
        btn_first.addActionListener(e -> {
            HalamanSaatIni = 1;// Set ke halaman pertama
            loadData(); // Memuat data pada halaman pertama
        });

        // Mengatur tombol halaman sebelumnya
        btn_before.addActionListener(e -> {
            if (HalamanSaatIni > 1) {// Memastikan halaman saat ini lebih dari 1
                HalamanSaatIni--; // Turun ke halaman sebelumnya
                loadData();// Memuat data pada halaman saat ini
            }
        });

        // Mengatur combo box untuk jumlah data per halaman
        cbx_data.addActionListener(e -> {
            DataperHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());// Mengambil jumlah data per halaman dari combo box
            HalamanSaatIni = 1;// Set ke halaman pertama setiap kali data per halaman diubah
            loadData(); //Memuat data
        });

        // Mengatur tombol halaman berikutnya
        btn_next.addActionListener(e -> {
            if (HalamanSaatIni < totalpages) {// Memastikan belum di halaman terakhir
                HalamanSaatIni++;// Naik ke halaman berikutnya
                loadData();//Memuat data pada halaman baru
            }
        });

        // Mengatur tombol halaman terakhir
        btn_last.addActionListener(e -> {
            HalamanSaatIni = totalpages;// Set ke halaman terakhir
            loadData();// Memuat data pada halaman terakhir
        });
    }

    // calculateTotalPage() - Menghitung total halaman berdasarkan jumlah data dan data per halaman
    private void calculateTotalPage() {
        int totalData = getTotalData();// Mendapatkan total data Kategori
        totalpages = (int) Math.ceil((double) totalData / DataperHalaman);// Menghitung total halaman
    }

    // getTotalData() - Mendapatkan total data Kategori dari database
    private int getTotalData() {
        int totalData = 0;
        try {
            String sql = "SELECT COUNT(*) AS total FROM tbl_transaksi";// Query menghitung total data Kategori
            try (PreparedStatement st = con.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery(); // Eksekusi query
                if (rs.next()) {
                    totalData = rs.getInt("total");// Mendapatkan jumlah total dari kolom "total"
                }
            }
        } catch (Exception e) {
            Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);
        }
        return totalData;// Mengembalikan jumlah data
    }

    // loadData() - Memuat data Kategori ke dalam JTable berdasarkan halaman saat ini
    private void loadData() {
        calculateTotalPage();// Menghitung total halaman
        int totalData = getTotalData();// Mendapatkan total data Kategori
        lb_halaman.setText(String.valueOf("Halaman " + HalamanSaatIni + " Dari total data " + totalData)); // Menampilkan halaman saat ini

        int startIndex = (HalamanSaatIni - 1) * DataperHalaman;// Menentukan indeks awal data berdasarkan halaman saat ini
        getData(startIndex, DataperHalaman, (DefaultTableModel) tbl_data.getModel());// Mendapatkan data untuk ditampilkan di tabel
    }

    // showPanel() - Mengatur tampilan panel utama
    private void showPanel() {
        panelMain.removeAll();// Menghapus semua komponen di panel utama
        panelMain.add(new MenuLaporan());// Menambahkan panel MenuKategori ke panel utama
        panelMain.repaint();// Menggambar ulang panel utama
        panelMain.revalidate();// Memastikan perubahan diterapkan
    }

    // resetForm() - Mengosongkan input form Kategori
   /* private void resetForm() {
        txt_id.setText("");
        txt_nama.setText("");
        txt_Deskripsi.setText("");
    }*/

    // setTabelModel() - Mengatur model tabel dengan kolom-kolom yang sesuai
    private void setTabelModel() {
        String[] columnNames = {
            "ID_Transaksi",
            "Nama PS",
            "Durasi",
            "Tanggal","Bayar"
        };
        DefaultTableModel model = new DefaultTableModel(columnNames, 0); // Membuat model tabel dengan kolom yang ditentukan
        tbl_data.setModel(model); // Mengatur model tabel untuk JTable
        loadData(); // Memuat data ke dalam tabel
    }

    // getData() - Mendapatkan data Kategori dari database dengan batasan jumlah data per halaman
    private void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0); // Mengosongkan data yang ada di tabel

        try {
            String sql = "SELECT * FROM tbl_transaksi t JOIN tbl_konsol k ON t.ID_Konsol = k.ID_Konsol LIMIT ?, ?"; // Query dengan limit berdasarkan halaman
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setInt(1, startIndex); // Indeks awal
                st.setInt(2, entriesPage); // Jumlah data per halaman
                ResultSet rs = st.executeQuery(); // Eksekusi query

                while (rs.next()) {
                    String IdTransaksi = rs.getString("ID_Transaksi");
                    String NamaKonsol = rs.getString("Nama_Konsol");
                    String durasi = rs.getString("Durasi");
                    String tanggal = rs.getString("tgl_transaksi");
                    String hargatotal = rs.getString("total");

                    Object[] rowData = {IdTransaksi, NamaKonsol, durasi,tanggal,hargatotal}; // Data Kategori
                    model.addRow(rowData); // Menambahkan baris data ke dalam tabel
                }
            }
        } catch (Exception e) {
            Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);

        }
    }

    // setIDKategori() - Mengatur ID Kategori secara otomatis
    private String setIDKategori() throws SQLException {
        String urutan = null;
        Date now = new Date();
        SimpleDateFormat noFormat = new SimpleDateFormat("yyMM"); // Format tanggal sebagai bagian dari ID
        String no = noFormat.format(now);

        String sql = "SELECT RIGHT(ID_Transaksi, 3) AS Nomor FROM tbl_transaksi WHERE ID_Transaksi LIKE '" + no + "%' ORDER BY ID_Transaksi DESC LIMIT 1";

        try (PreparedStatement st = con.prepareStatement(sql)) {
            ResultSet rs = st.executeQuery(); // Eksekusi query

            if (rs.next()) {
                int nomor = Integer.parseInt(rs.getString("nomor")) + 1; // Menambah nomor urut
                urutan = no + String.format("%03d", nomor); // Format ID baru
            } else {
                urutan = no + "001"; // ID awal jika tidak ada data
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);
        }
        return urutan;
    }

    // validasiNama() - diperlukan untuk memastikan bahwa setiap nama kategori yang dimasukkan pengguna unik
    //Menggunakan tipe data boolean untuk fungsi validasiNama bertujuan
    //agar fungsi ini dapat memberikan hasil berupa status validasi dengan dua kemungkinan:true dan false
    /*public boolean validasiNama() {
        // Variabel untuk menyimpan status validasi, default-nya adalah false
        boolean valid = false;

        // Mengambil data dari form
        String IdKategori = txt_id.getText(); // ID kategori yang diinput pengguna
        String NamaKategori = txt_nama.getText(); // Nama kategori yang diinput pengguna

        // Query SQL untuk memeriksa apakah nama kategori sudah ada di database,
        // kecuali untuk kategori dengan ID yang sedang diupdate (ID_Kategori != IdKategori)
        // Menggunakan LIKE BINARY agar pencarian bersifat case-sensitive
        String sql = "SELECT Nama_Kategori FROM tbl_kategori WHERE ID_Kategori!='" + IdKategori + "' AND Nama_Kategori LIKE BINARY '" + NamaKategori + "'";

        try (PreparedStatement st = con.prepareStatement(sql)) {
            // Eksekusi query
            ResultSet rs = st.executeQuery();

            // Mengecek apakah hasil query mengembalikan data
            if (rs.next()) {
                // Jika ada data, berarti nama kategori sudah ada
                JOptionPane.showMessageDialog(this,
                        "Nama Kategori sudah ada\nSilahkan input nama kategori yang berbeda",
                        "Peringatan",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                // Jika tidak ada data, berarti nama kategori valid
                valid = true;
            }
        } catch (SQLException e) {
            // Menangkap dan mencatat error jika terjadi kesalahan SQL
            Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);
        }

        // Mengembalikan status validasi (true jika valid, false jika tidak valid)
        return valid;
    }*/

    // insertData() - Menambahkan data Kategori ke database
    /*private void insertData() {
        String IdKategori = txt_id.getText();
        String NamaKategori = txt_nama.getText();
        String deskripsiKategori = txt_Deskripsi.getText();

        // Validasi input data
        if (IdKategori.isEmpty() || NamaKategori.isEmpty() || deskripsiKategori.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus Diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!validasiNama()) {
            return;
        }

        // Insert data ke database
        try {
            String sql = "INSERT INTO tbl_kategori (ID_Kategori, Nama_Kategori, Deskripsi) VALUES (?,?,?)";
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setString(1, IdKategori);
                st.setString(2, NamaKategori);
                st.setString(3, deskripsiKategori);

                int rowInserted = st.executeUpdate();// Menjalankan perintah insert
                if (rowInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Ditambahkan");
                    resetForm(); // Kosongkan text field setelah data berhasil ditambahkan
                    loadData();  // Memuat data ke tampilan JTable atau komponen lainnya
                    showPanel();
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);
        }
    }*/
    // dataTabel() - Menampilkan data Kategori dari JTable ke dalam form untuk diperbarui
  /*  private void dataTabel() {
        int row = tbl_data.getSelectedRow(); // Mendapatkan baris yang dipilih pada tabel
        if (row == -1) { // Jika tidak ada baris yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih baris terlebih dahulu!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return; // Keluar dari metode
        }

        panelView.setVisible(false); // Menyembunyikan panel view
        panelAdd.setVisible(true); // Menampilkan panel tambah/edit

        jLabel7.setText("PERBARUI DATA Kategori"); // Mengubah teks label menjadi "PERBARUI DATA Kategori"
        txt_id.setEnabled(false); // Menonaktifkan field ID Kategori agar tidak bisa diedit

        // Mengisi field form dengan data dari baris yang dipilih
        txt_id.setText(tbl_data.getValueAt(row, 0).toString());
        txt_nama.setText(tbl_data.getValueAt(row, 1).toString());
        txt_Deskripsi.setText(tbl_data.getValueAt(row, 2).toString());
    }
*/
    // updateData() - Memperbarui data Kategori di database
    /*private void updateData() {
        // Mengambil data dari form
        String IdKategori = txt_id.getText();
        String NamaKategori = txt_nama.getText();
        String deskripsiKategori = txt_Deskripsi.getText();

        // Validasi input data
        if (IdKategori.isEmpty() || NamaKategori.isEmpty() || deskripsiKategori.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus Diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Insert data ke database
        try {
            String sql = "UPDATE tbl_kategori SET Nama_Kategori=?, Deskripsi=? WHERE ID_Kategori=?";
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setString(1, NamaKategori);
                st.setString(2, deskripsiKategori);
                st.setString(3, IdKategori);

                int rowUpdated = st.executeUpdate();
                if (rowUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    resetForm();// Kosongkan form
                    loadData();  // Refresh data di JTable
                    showPanel(); // Tampilkan panel utama
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);
        }
    }*/
/*
    // hapusData() - Menghapus data Kategori dari database
    private void hapusData() {
        int row = tbl_data.getSelectedRow(); // Mendapatkan baris yang dipilih
        if (row == -1) { // Jika tidak ada baris yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih baris yang akan dihapus!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return; // Keluar dari metode
        }

        String IdKategori = tbl_data.getValueAt(row, 0).toString(); // Mendapatkan ID Kategori dari baris yang dipilih

        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda Yakin Menghapus Data Ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String sql = "DELETE FROM tbl_kategori WHERE ID_Kategori=?";
                try (PreparedStatement st = con.prepareStatement(sql)) {
                    st.setString(1, IdKategori);

                    int rowDeleted = st.executeUpdate(); // Eksekusi penghapusan
                    if (rowDeleted > 0) {
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                        loadData(); // Refresh data di JTable
                    }
                }
            } catch (SQLException e) {
                Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }
*/
   
    // searchData() - Mencari data Kategori berdasarkan nama atau alamat
    private void searchData() {
        String kataKunci = txt_search.getText(); // Mengambil kata kunci dari text field pencarian

        DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
        model.setRowCount(0);// Mengosongkan data di tabel sebelum memuat hasil pencarian

        try {
            String sql = "SELECT * FROM tbl_kategori WHERE Nama_Kategori LIKE ? OR Deskripsi LIKE ?";
            try (PreparedStatement st = con.prepareStatement(sql)) {
                st.setString(1, "%" + kataKunci + "%"); // Parameter pencarian pada kolom Nama
                st.setString(2, "%" + kataKunci + "%");// Parameter pencarian pada kolom Alamat

                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String IdKategori = rs.getString("ID_Kategori");
                    String NamaKategori = rs.getString("Nama_Kategori");
                    String deskripsiKategori = rs.getString("Deskripsi");

                    Object[] rowData = {IdKategori, NamaKategori, deskripsiKategori};
                    model.addRow(rowData);// Tambahkan hasil pencarian ke dalam JTable
                }
            }
        } catch (Exception e) {
            Logger.getLogger(MenuLaporan.class.getName()).log(Level.SEVERE, null, e);

        }
    }
}
